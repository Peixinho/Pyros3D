[Prefix="p3d::Math::"]
interface Vec2 {
	attribute float x;
	attribute float y;
	void Vec2();
	void Vec2(float X, float Y);
	float dotProduct([Const, Ref] Vec2 v);
	float magnitude();
	float magnitudeSQR();
	float distance([Const, Ref] Vec2 v);
	float distanceSQR([Const, Ref] Vec2 v);
	[Value] Vec2 normalize();
	[Value] Vec2 negate();
	[Value] Vec2 Abs();
	[Operator="+="] void add([Const, Ref] Vec2 v);
	[Operator="-="] void sub([Const, Ref] Vec2 v);
	[Operator="*="] void mul([Const, Ref] Vec2 v);
	[Operator="/="] void div([Const, Ref] Vec2 v);
	[Operator="+="] void add_scalar(float f);
	[Operator="-="] void sub_scalar(float f);
	[Operator="*="] void mul_scalar(float f);
	[Operator="/="] void div_scalar(float f);
};

[Prefix="p3d::Math::"]
interface Vec3 {
	attribute float x;
	attribute float y;
	attribute float z;
	void Vec3();
	void Vec3(float X, float Y, float Z);
	float dotProduct([Const, Ref] Vec3 v);
	float magnitude();
	float magnitudeSQR();
	float distance([Const, Ref] Vec3 v);
	float distanceSQR([Const, Ref] Vec3 v);
	[Value] Vec3 cross([Const, Ref] Vec3 v);
	[Value] Vec3 normalize();
	void normalizeSelf();
	[Value] Vec3 negate();
	void negateSelf();
	[Value] Vec3 Abs();
	[Operator="+="] void add([Const, Ref] Vec3 v);
	[Operator="-="] void sub([Const, Ref] Vec3 v);
	[Operator="*="] void mul([Const, Ref] Vec3 v);
	[Operator="/="] void div([Const, Ref] Vec3 v);
	[Operator="+="] void add_scalar(float f);
	[Operator="-="] void sub_scalar(float f);
	[Operator="*="] void mul_scalar(float f);
	[Operator="/="] void div_scalar(float f);
};

[Prefix="p3d::Math::"]
interface Vec4 {
	attribute float x;
	attribute float y;
	attribute float z;
	attribute float w;
	void Vec4();
	void Vec4(float X, float Y, float Z, float W);
	float dotProduct([Const, Ref] Vec4 v);
	float magnitude();
	float magnitudeSQR();
	[Value] Vec4 Abs();
	[Operator="+="] void add([Const, Ref] Vec4 v);
	[Operator="-="] void sub([Const, Ref] Vec4 v);
	[Operator="*="] void mul([Const, Ref] Vec4 v);
	[Operator="/="] void div([Const, Ref] Vec4 v);
	[Operator="+="] void add_scalar(float f);
	[Operator="-="] void sub_scalar(float f);
	[Operator="*="] void mul_scalar(float f);
	[Operator="/="] void div_scalar(float f);	
};

[Prefix="p3d::Math::"]
interface Quaternion {
	attribute float x;
	attribute float y;
	attribute float z;
	attribute float w;
	void Quaternion();
	void Quaternion(float w, float x, float y, float z);
	void Quaternion(float x, float y, float z);
	void Quaternion([Const, Ref] Vec3 v, float angle);
	[Value] Matrix ConvertToMatrix();
	float Magnitude();
	float Dot ([Const, Ref] Quaternion q);
	void Normalize();
	void Rotation(float xAngle, float yAngle, float zAngle);
	void SetRotationFromEuler([Const, Ref] Vec3 rotation, [Const] long order);
	[Value] Vec3 GetEulerFromQuaternion([Const] long order);
	void AxisToQuaternion([Const, Ref] Vec3 v, float angle);
	[Value] Quaternion Slerp([Const, Ref] Quaternion b, float t);
	[Value] Quaternion Nlerp([Const, Ref] Quaternion b, float t, boolean shortestPath);
	[Value] Quaternion Inverse();
	[Operator="*="] void mul([Const, Ref] Quaternion q);
};

[Prefix="p3d::Math::"]
interface Matrix {
	void Matrix();
	void Matrix(float n11,float n21,float n31,float n41,float n12,float n22,float n32,float n42,float n13,float n23,float n33,float n43,float n14,float n24,float n34,float n44);
	void identity();
	void LookAt([Const, Ref] Vec3 eye,[Const, Ref] Vec3 center,[Const, Ref] Vec3 up);
	void LookAt([Const, Ref] Vec3 eye,[Const, Ref] Vec3 center);
	void Translate(float x, float y, float z);
	void Translate([Const, Ref] Vec3 xyz);
	void TranslateX(float x);
	void TranslateY(float y);
	void TranslateZ(float z);
	[Value] Vec3 GetTranslation();
	void RotationX(float angle);
	void RotationY(float angle);
	void RotationZ(float angle);
	void SetRotationFromEuler([Const, Ref] Vec3 rotation, [Const] long order);
	[Value] Vec3 GetEulerFromRotationMatrix([Const] long order);
	[Value] Matrix GetRotation([Const, Ref] Vec3 scale);
	void Scale(float sx, float sy, float sz);
	void Scale([Const, Ref] Vec3 xyz);
	void ScaleX(float x);
	void ScaleY(float y);
	void ScaleZ(float z);
	[Value] Vec3 GetScale();
	float Determinant();
	[Value] Matrix Transpose();
	[Value] Matrix Inverse();
	[Value] Matrix PerspectiveMatrix(float fov, float aspect, float near, float far);
	[Value] Matrix OrthoMatrix(float left, float right, float bottom, float top, float near, float far);
	[Value] Quaternion ConvertToQuaternion();
	[Operator="*="] void mul([Const, Ref] Matrix m);
};

[Prefix="p3d::"]
interface SceneGraph {
	void SceneGraph();
	void Update(double Timer);
	void Add(GameObject GO);
	void Remove(GameObject GO);
	void AddGameObject(GameObject GO);
	void RemoveGameObject(GameObject GO);
	double GetTime();
};

[Prefix="p3d::"]
interface GameObject {
	void GameObject();
	void Init();
	void Update();
	void Destroy();
	[Const, Ref] Matrix GetLocalTransformation();
	[Const, Ref] Vec3 GetPosition();
	[Const, Ref] Vec3 GetRotation();
	[Const, Ref] Vec3 GetScale();
	[Value] Vec3 GetDirection();
	[Const, Ref] Matrix GetWorldTransformation();
	[Value] Vec3 GetWorldPosition();
	[Value] Vec3 GetWorldRotation();
	void SetPosition([Const, Ref] Vec3 position);
	void SetRotation([Const, Ref] Vec3 rotation);
	void SetScale([Const, Ref] Vec3 scale);
	void SetTransformationMatrix([Const, Ref] Matrix transformation);
	void LookAtGameObject(GameObject GO);
	void LookAtVec([Const, Ref] Vec3 Position);
	void AddComponent(IComponent Component);
	void RemoveComponent(IComponent Component);
	void AddGameObject(GameObject GO);
	void RemoveGameObject(GameObject GO);
	GameObject GetParent();
	boolean HaveParent();
	void AddTag(DOMString tag);
	void RemoveTag(DOMString tag);
	boolean HaveTag(DOMString tag);
	boolean IsStatic();
};

[Prefix="p3d::"]
interface Projection {
	void Projection();
	void Perspective(float fov, float aspect, float near, float far);
    void Ortho(float left, float right, float bottom, float top, float near, float far);

    [Value] Matrix GetProjectionMatrix();	
};

[Prefix="p3d::"]
interface IRenderer {
	void ClearBufferBit(long Option);
	void EnableClearDepthBuffer();
	void DisableClearDepthBuffer();
	void ClearDepthBuffer();
	void EnableClipPlane(long numberOfClipPlanes);
	void DisableClipPlane();
	void SetClipPlane0([Const, Ref] Vec4 clipPlane);
	void SetClipPlane1([Const, Ref] Vec4 clipPlane);
	void SetClipPlane2([Const, Ref] Vec4 clipPlane);
	void SetClipPlane3([Const, Ref] Vec4 clipPlane);
	void SetClipPlane4([Const, Ref] Vec4 clipPlane);
	void SetClipPlane5([Const, Ref] Vec4 clipPlane);
	void SetClipPlane6([Const, Ref] Vec4 clipPlane);
	void SetClipPlane7([Const, Ref] Vec4 clipPlane);
	void EnableStencil();
	void DisableStencil();
	void ClearStencilBuffer();
	void StencilFunction(long func, long ref, long mask);
	void StencilOperation(long sfail, long dpfail, long dppass);
	void EnableScissorTest();
	void DisableScissorTest();
	void ScissorTestRect(float x, float y, float width, float height);
	void EnableWireFrame();
	void DisableWireFrame();
	void ColorMask(boolean r, boolean g, boolean b, boolean a);
	void EnableSorting();
	void DisableSorting();
	void EnableLOD();
	void DisableLOD();
	boolean IsUsingLOD();
	void SetBackground([Const, Ref] Vec4 Color);
	void UnsetBackground();
	void SetGlobalLight([Const, Ref] Vec4 Light);
	void EnableDepthBias([Const, Ref] Vec2 Bias);
	void DisableDepthBias();
	void SetViewPort(long initX, long initY, long endX, long endY);
	void ResetViewPort();
	void Resize(long Width, long Height);
	void ActivateCulling(long cullingType);
	void DeactivateCulling();
	void RenderScene([Const, Ref] Projection projection, GameObject Camera, SceneGraph Scene);
	void PreRender(GameObject Camera, SceneGraph Scene, DOMString Tag);
	void PreRender(GameObject Camera, SceneGraph Scene);
};

[Prefix="p3d::", JSImplementation="IRenderer"]
interface ForwardRenderer {
	void ForwardRenderer([Const] long Width, [Const] long Height);
};

[Prefix="p3d::"]
interface IComponent {

};

[Prefix="p3d::"]
interface Renderable {

};

[Prefix="p3d::"]
interface RenderingMesh {

};

[Prefix="p3d::"]
interface RenderingComponent {
      void RenderingComponent(Renderable renderable, IMaterial Material, float Distance);
      void AddLOD(Renderable renderable, float Distance, IMaterial Material);
      void Register(SceneGraph Scene);
      void Init();
      void Update();
      void Destroy();
      void Unregister(SceneGraph Scene);
			void SetCullingGeometry(long Geometry);
			void EnableCullTest();
			void DisableCullTest();
			boolean IsCullTesting();
			void EnableCastShadows();
			void DisableCastShadows();
			boolean IsCastingShadows();
			Renderable GetRenderable();
			//const std::map<StringID, Bone> &GetSkeleton();
			boolean HasBones();
			//RenderingMesh[] GetMeshes(long LODLevel);
			long GetLODSize();
			long GetLODByDistance(float Distance);
			void UpdateLOD(long lod);
			//IComponent[] GetComponents();
};

[Prefix="p3d::"]
interface Cascade {

};

[Prefix="p3d::"]
interface DirectionalLight {
	void DirectionalLight();
	void DirectionalLight([Const, Ref] Vec4 color);
	void DirectionalLight([Const, Ref] Vec4 color, [Const, Ref] Vec3 direction);
	void Start();
	void Update();
	void Destroy();
	void EnableCastShadows(long Width, long Height, [Const, Ref] Projection projection, float Near, float Far, long Cascades);
	//Matrix GetLightProjection([Const, Ref] Matrix ShadowViewMatrix, long Cascade, RenderingMesh[] RCompList);
	void UpdateCascadeFrustumPoints(long Cascade, [Const, Ref] Vec3 CameraPosition, [Const, Ref] Vec3 CameraDirection);
	long GetNumberCascades();
	//Cascade GetCascade(long Cascade);
	[Const, Ref] Vec3 GetLightDirection();
	void SetLightDirection([Const, Ref] Vec3 direction);
};

[Prefix="p3d::"]
interface PointLight {
	void PointLight();
	void PointLight([Const, Ref] Vec4 color, float radius);
	void Start();
	void Update();
	void Destroy();
	float GetShadowFar();
	float GetLightRadius();
	void SetLightRadius(float radius);
	void EnableCastShadows(long Width, long Height, float Near);
};

[Prefix="p3d::"]
interface SpotLight {
	void SpotLight();
	void SpotLight([Const, Ref] Vec4 color, float radius, [Const, Ref] Vec3 direction, float OutterCone, float InnerCone);
	void Start();
	void Update();
	void Destroy();
	float GetShadowFar();
	[Const, Ref] Vec3 GetLightDirection();
	void SetLightDirection([Const, Ref] Vec3 direction);
	float GetLightCosInnerCone();
	float GetLightCosOutterCone();
	float GetLightInnerCone();
	float GetLightOutterCone();
	void SetLightInnerCone(float inner);
	void SetLightOutterCone(float outter);
	float GetLightRadius();
	void SetLightRadius(float radius);
	void EnableCastShadows(long Width, long Height, long Near);
};

[Prefix="p3d::"]
interface Uniform {
	void Uniform();
	void Uniform(DOMString name, long usage, long type);
	void Uniform(DOMString name, long type, VoidPtr value, long elementCount);
	void SetValue(VoidPtr value, long elementCount);
};

[Prefix="p3d::"]
interface Texture {
	void Texture();
	boolean LoadTexture([Const] DOMString Filename, long Type, boolean Mipmapping, long level);
	//boolean LoadTextureFromMemory(octet[] data, long length, long Type, boolean Mipmapping, long level);
	boolean CreateEmptyTexture(long Type, long DataType, long width, long height, boolean Mipmapping, long level, long msaa);
	void SetMinMagFilter(long MinFilter, long MagFilter);
	void SetRepeat(long WrapS,long WrapT,long WrapR);
	void EnableCompareMode();
	void SetAnysotropy(long Anysotropic);
	void SetTransparency(float Transparency);
	void Resize(long Width, long Height);
	void UpdateData(VoidPtr srcPTR);
	void UpdateMipmap();
	void SetTextureByteAlignment(long Value);
	long GetBindID();
	long GetWidth();
	long GetHeight();
	void Bind();
	void Unbind();
	void DeleteTexture();  
	long GetLastBindedUnit();
};

[Prefix="p3d::"]
interface IMaterial {
	void IMaterial();
	void PreRender();
	void Render();
	void AfterRender();
	void SetCullFace(long face);
	long GetCullFace();
	boolean IsWireFrame();
	float GetOpacity();
	boolean IsTransparent();
	void SetOpacity(float opacity);
	void SetTransparencyFlag(boolean transparency);
	void EnableDethBias(float factor, float units);
	void DisableDethBias();
	void EnableBlending();
	void DisableBlending();
	void BlendingFunction(long sFactor, long dFactor);
	void BlendingEquation(long Mode);
	Uniform AddUniform([Ref]Uniform Data);
	void StartRenderWireFrame();
	void StopRenderWireFrame();
	void EnableCastingShadows();
	void DisableCastingShadows();
	boolean IsCastingShadows();
	void Destroy();
	long GetShader();
	long GetInternalID();
	void EnableDepthTest(long test);
	void DisableDepthTest();
	void EnableDepthWrite();
	void DisableDepthWrite();
	boolean IsDepthWritting();
	boolean IsDepthTesting();
};

[Prefix="p3d::", JSImplementation="IMaterial"]
interface GenericShaderMaterial {
	void GenericShaderMaterial(long options);
	void SetColor([Const, Ref] Vec4 color);
	void SetSpecular([Const, Ref] Vec4 specularColor);
	void SetColorMap(Texture colormap);
	void SetDisplacementMap(Texture displacementmap);
	void SetSpecularMap(Texture specular);
	void SetNormalMap(Texture normalmap);
	void SetEnvMap(Texture envmap);
	void SetSkyboxMap(Texture skyboxmap);
	void SetRefractMap(Texture refractmap);
	void AddTexture(DOMString uniformName, Texture texture);
	void SetTextFont(Font font);
	void SetReflectivity(float reflectivity);
	/*void SetLightingProperties([Const, Ref] Vec4 Ke, [Const, Ref] Vec4 Ka, [Const, Ref] Vec4 Kd, [Const, Ref] Vec4 Ks, float shininess);
	void SetKe([Const, Ref] Vec4 Ke);
	void SetKa([Const, Ref] Vec4 Ka);
	void SetKd([Const, Ref] Vec4 Kd);
	void SetKs([Const, Ref] Vec4 Ks);*/
	void SetShininess(float shininess);
	void PreRender();
	void AfterRender();
	void BindTextures();
	void UnbindTextures();
	void SetPCFTexelSize(float texel);
	void SetPCFTexelCascadesSize(float texel1,float texel2,float texel3,float texel4);
	void SetDisplacementHeight(float height);
};

[Prefix="p3d::", JSImplementation="IMaterial"]
interface CustomShaderMaterial {
	void CustomShaderMaterial(Shader shader);
	//void SetShader(Shader shader);
	void PreRender();
	void AfterRender();
};

[Prefix="p3d::"]
interface Shader {
	void Shader();
	void LoadShaderFile(DOMString filename);
	void LoadShaderText(DOMString text);
	boolean CompileShader(long type, DOMString definitions);
	void DeleteShader();
	boolean LinkProgram();
	long ShaderProgram();
	long GetUniformLocation(long program, DOMString name);
	long GetAttributeLocation(long program, DOMString name);
	void SendUniform([Const, Ref] Uniform uniform, long Handle);
	void SendUniform([Const, Ref] Uniform uniform, VoidPtr data, long Handle, long elementCount);
};

[Prefix="p3d::"]
interface Cube {
	void Cube(float width, float height, float depth, boolean smooth, boolean flip);
};
[Prefix="p3d::"]
interface Capsule {
	void Capsule(float radius, float height, float numRings, long segmentsW, long segmentsH, boolean smooth, boolean flip);
};
[Prefix="p3d::"]
interface Cone {
	void Cone(float radius, float height, long segmentsW, long segmentsH, boolean openEnded, boolean smooth, boolean flip);
};
[Prefix="p3d::"]
interface Cylinder {
	void Cylinder(float radius, float height, long segmentsW, long segmentsH, boolean openEnded, boolean smooth, boolean flip);
};
[Prefix="p3d::"]
interface Plane {
	void Plane(float width, float height, boolean smooth, boolean flip);
};
[Prefix="p3d::"]
interface Sphere {
	void Sphere(float radius, long segmentsW, long segmentsH, boolean smooth, boolean HalfSphere, boolean flip);
};
[Prefix="p3d::"]
interface Torus {
	void Torus(float radius, float tube, long segmentsW, long segmentsH, boolean smooth, boolean flip);
};
[Prefix="p3d::"]
interface TorusKnot {
	void TorusKnot(float radius, float tube, long segmentsW, long segmentsH, float p, float q, long heightScale, boolean smooth, boolean flip);
};

[Prefix="p3d::"]
interface Model {
	void Model(DOMString ModelPath, boolean mergeMeshes);
};

[Prefix="p3d::"]
interface Font {
	void Font(DOMString font, float size);
	void CreateText(DOMString text);
	Texture GetTexture();
	float GetFontSize();
};

[Prefix="p3d::"]
interface Text {
	void Text(Font font, DOMString text, float charWidth, float charHeight, [Const, Ref] Vec4 color, boolean DynamicText);
	void UpdateText(DOMString text, [Const, Ref] Vec4 color);
};

[Prefix="p3d::"]
interface SkeletonAnimation {
	void SkeletonAnimation();
	void LoadAnimation(DOMString AnimationFile);
	long GetNumberAnimations();
	void Update(float time);
	SkeletonAnimationInstance CreateInstance(RenderingComponent Component);
	void DestroyInstance(SkeletonAnimationInstance Instance);
	long GetAnimationIDByName(DOMString name);
};

[Prefix="p3d::"]
interface SkeletonAnimationInstance {
	void SkeletonAnimationInstance(SkeletonAnimation owner, RenderingComponent Component);
	long Play(long animation, float startTime, float repetition, float speed, float scale, DOMString LayerName);
	void ChangeProperties( long animationOrder, float startTime, float repetition, float speed, float scale);
	void Pause();
	void PauseAnimation(long animationOrder);
	void ResumeAnimation(long animationOrder);
	void Resume();
	void StopAnimation(long animationOrder);
	void Stop();
	boolean IsPaused(long animationOrder);
	boolean IsPaused();
	float GetAnimationCurrentProgress(long animationOrder);
	float GetAnimationDuration(long animationOrder);
	float GetAnimationCurrentTime(long animationOrder);
	float GetAnimationSpeed(long animationOrder);
	float GetAnimationStartTime(long animationOrder);
	float GetAnimationStartTimeProgress(long animationOrder);
	float GetAnimationID(long animationOrder);
	float GetAnimationScale(long animationOrder);
	float GetAnimationPositionInVector(long animation);
	long CreateLayer(DOMString name);
	void AddBone(DOMString LayerName, DOMString bone);
	void AddBoneAndChilds(DOMString LayerName, DOMString bone, boolean inclusive);
	void RemoveBone(DOMString LayerName, DOMString bone);
	void RemoveBoneAndChilds(DOMString LayerName, DOMString bone);
	void DestroyLayer(DOMString LayerName);
};

[Prefix="p3d::"]
interface TextureAnimation {
	void TextureAnimation();
	Texture GetFrame(long frame);
	long GetNumberFrames();
	void AddFrame(Texture texture);
	void Update(float time);
	TextureAnimationInstance CreateInstance(float fps);
	void DestroyInstance(TextureAnimationInstance Instance);
};

[Prefix="p3d::"]
interface TextureAnimationInstance {
	void TextureAnimationInstance(TextureAnimation owner, float fps);
	void Play(long Repeat);
	void Pause();
	void Stop();
	boolean IsPlaying();
	void YoYo(boolean yo);
	Texture GetTexture();
	long GetFrame();
};

[Prefix="p3d::"]
interface IPhysicsComponent {
};

[Prefix="p3d::"]
interface BulletPhysics {
	void BulletPhysics();
	void InitPhysics();
	void Update(float time, long steps);
	void EndPhysics();
            
	void RemovePhysicsComponent(IPhysicsComponent pcomp);
	void UpdateTransformations(IPhysicsComponent pcomp);
	void UpdatePosition(IPhysicsComponent pcomp, [Const, Ref] Vec3 position);
	void UpdateRotation(IPhysicsComponent pcomp, [Const, Ref] Vec3 rotation);
	void CleanForces(IPhysicsComponent pcomp);
	void SetAngularVelocity(IPhysicsComponent pcomp, [Const, Ref] Vec3 velocity);
	void SetLinearVelocity(IPhysicsComponent pcomp, [Const, Ref] Vec3 velocity);
	void Activate(IPhysicsComponent pcomp);

	IPhysicsComponent CreateBox(float width, float height, float depth, float mass);
	IPhysicsComponent CreateCapsule(float radius, float height, float mass);
	IPhysicsComponent CreateCone(float radius, float height, float mass);
	/*IPhysicsComponent CreateConvexHull([Const] std::vector<Vec3> &points, float mass);*/
	IPhysicsComponent CreateConvexTriangleMesh(RenderingComponent rcomp, float mass);
	/*IPhysicsComponent CreateConvexTriangleMesh([Const] std::vector<uint32> &index, [Const] std::vector<Vec3> &vertex, float mass);*/
	IPhysicsComponent CreateCylinder(float radius, float height, float mass);
	/*IPhysicsComponent CreateMultipleSphere([Const] std::vector<Vec3> &positions, [Const] std::vector<float> &radius, float mass);*/
	IPhysicsComponent CreateSphere(float radius, float mass);
	IPhysicsComponent CreateStaticPlane([Const, Ref] Vec3 Normal, float Constant, float mass);
	IPhysicsComponent CreateTriangleMesh(RenderingComponent rcomp, float mass);
	/*IPhysicsComponent CreateTriangleMesh([Const] std::vector<uint32> &index, [Const] std::vector<Vec3> &vertex, float mass);*/
	IPhysicsComponent CreateVehicle(IPhysicsComponent ChassisShape);
	void AddWheel(IPhysicsComponent pcomp, [Const, Ref] Vec3 WheelDirection, [Const, Ref] Vec3 WheelAxle, float WheelRadius, float WheelWidth, float WheelFriction, float WheelRollInfluence, [Const, Ref] Vec3 Position, boolean isFrontWheel);
};

interface PyrosJSNative {
	void PyrosJSNative();
	void CreateContext();
};